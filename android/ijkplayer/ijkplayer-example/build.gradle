if (isModuleAsApp.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    // http://tools.android.com/tech-docs/new-build-system/tips
    //noinspection GroovyAssignabilityCheck
    compileSdkVersion rootProject.ext.compileSdkVersion

    lintOptions {
        abortOnError false
    }
    defaultConfig {
        if (isModuleAsApp.toBoolean()) {
            applicationId "tv.danmaku.ijk.media.example"
            versionCode rootProject.ext.versionCode
            versionName rootProject.ext.versionName
        }
        minSdkVersion 9
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (isModuleAsApp.toBoolean()) {
        flavorDimensions "app"
        productFlavors {
            all32 {
                minSdkVersion 9
                dimension "app"
            }
            all64 {
                minSdkVersion 21
                dimension "app"
            }
            // armv5 {}
            // armv7a {}
            // arm64 { minSdkVersion 21 }
            // x86 {}
        }
    } else {
        // 老版本的gradle中library不支持配置flavor...?
    }
    lintOptions {
        warning 'deprecation'
    }
    sourceSets {
        main {
            if (!isModuleAsApp.toBoolean()) {
                /* listFiles(): 列出path中除excludes以外的所有文件*/
                def listFiles = { String path, String[] excludes, String outPath = 'src/main/java/' ->
                    def canonicalPath = file(path).canonicalPath
                    def canonicalOutPath = file(outPath).canonicalPath
                    def prefix = canonicalPath.substring(canonicalOutPath.length() + 1).replace('\\', '/')
                    file(path).list().findAll { !excludes.contains(it) }.collect {
                        "$prefix/$it"
                    }
                }

                // 重定向 清单文件
                manifest.srcFile 'src/module/AndroidManifest.xml'
                // 重定向 res文件
                res.srcDirs = ['src/module/res']
                // 排除不需要的Java文件
                java {
                    exclude '**/*Activity.java'
                    exclude listFiles('src/main/java/tv/danmaku/ijk/media/example/fragments', /*excludes: */ 'SettingsFragment.java')
                    exclude 'tv/danmaku/ijk/media/example/content/**'
                    exclude 'tv/danmaku/ijk/media/example/eventbus/**'

                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation "junit:junit:4.12"
    androidTestImplementation("com.android.support.test:runner:1.0.2") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation 'com.android.support:appcompat-v7:23.0.1'
    implementation 'com.android.support:preference-v7:23.0.1'
    implementation 'com.android.support:support-annotations:23.0.1'

    implementation 'com.squareup:otto:1.3.8'

    api project(':ijkplayer-java')

    if (isModuleAsApp.toBoolean()) {
        implementation project(':ijkplayer-exo')
//      all32Implementation project(':ijkplayer-armv5')
        all32Implementation project(':ijkplayer-armv7a')
//      all32Implementation project(':ijkplayer-x86')

//      all64Implementation project(':ijkplayer-armv5')
        all64Implementation project(':ijkplayer-armv7a')
//      all64Implementation project(':ijkplayer-arm64')
//      all64Implementation project(':ijkplayer-x86')
//      all64Implementation project(':ijkplayer-x86_64')
    } else {
        implementation project(':ijkplayer-armv7a')
//      implementation project(':ijkplayer-x86')
    }

    // implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.4'
    // implementation 'tv.danmaku.ijk.media:ijkplayer-exo:0.8.4'

    // all32Implementation 'tv.danmaku.ijk.media:ijkplayer-armv5:0.8.4'
    // all32Implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.4'
    // all32Implementation 'tv.danmaku.ijk.media:ijkplayer-x86:0.8.4'

    // all64Implementation 'tv.danmaku.ijk.media:ijkplayer-armv5:0.8.4'
    // all64Implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.4'
    // all64Implementation 'tv.danmaku.ijk.media:ijkplayer-arm64:0.8.4'
    // all64Implementation 'tv.danmaku.ijk.media:ijkplayer-x86:0.8.4'
    // all64Implementation 'tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.4'

    // armv5Implementation project(':player-armv5')
    // armv7aImplementation project(':player-armv7a')
    // arm64Implementation project(':player-arm64')
    // x86Implementation project(':player-x86')
    // x86_64Implementation project(':player-x86_64')
}

if (!isModuleAsApp.toBoolean()) {
    apply from: new File(rootProject.projectDir, "tools/gradle-on-demand.gradle");
}